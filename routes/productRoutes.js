const express = require("express");
const Product = require("../models/Product");
const { authMiddleware, adminMiddleware } = require("../middleware/authMiddleware");

console.log("‚úÖ authMiddleware:", authMiddleware);
console.log("‚úÖ adminMiddleware:", adminMiddleware);

const router = express.Router();

router.get("/", async (req, res) => {
  try {
    console.log("üìå GET /api/products - –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤");
    const products = await Product.find();
    res.status(200).json(products);
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤:", error);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

router.post("/", authMiddleware, adminMiddleware, async (req, res) => {
  try {
    console.log("üìå POST /api/products - –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞");
    console.log("üìå –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞:", req.body);

    const { name, price, description, category, stock } = req.body;
    if (!name || !price || !description || !category || stock === undefined) {
      return res.status(400).json({ message: "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è" });
    }

    const newProduct = new Product({ name, price, description, category, stock });
    await newProduct.save();
    console.log("‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω:", newProduct);
    res.status(201).json({ message: "–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω", product: newProduct });
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞:", error);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

router.put("/:id", authMiddleware, adminMiddleware, async (req, res) => {
  try {
    console.log(`üìå PUT /api/products/${req.params.id} - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞`);
    console.log("üìå –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞:", req.body);

    const { name, price, description, category, stock } = req.body;
    const updatedProduct = await Product.findByIdAndUpdate(
      req.params.id,
      { name, price, description, category, stock },
      { new: true }
    );

    if (!updatedProduct) {
      return res.status(404).json({ message: "–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω" });
    }

    console.log("‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω:", updatedProduct);
    res.status(200).json({ message: "–¢–æ–≤–∞—Ä –æ–±–Ω–æ–≤–ª—ë–Ω", product: updatedProduct });
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞:", error);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

router.delete("/:id", authMiddleware, adminMiddleware, async (req, res) => {
  try {
    console.log(`üìå DELETE /api/products/${req.params.id} - –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞`);
    const deletedProduct = await Product.findByIdAndDelete(req.params.id);

    if (!deletedProduct) {
      return res.status(404).json({ message: "–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω" });
    }

    console.log("‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω:", deletedProduct);
    res.status(200).json({ message: "–¢–æ–≤–∞—Ä —É–¥–∞–ª—ë–Ω" });
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞:", error);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

module.exports = router;
